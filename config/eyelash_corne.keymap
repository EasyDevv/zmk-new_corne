#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/* 
KEY POSITIONS
╭────────────────────────╮ ╭────────────────────────╮     
│ 0   1   2   3   4   5  │ │ 7   8   9   10  11  12 │         
│ 13  14  15  16  17  18 │ │ 22  23  24  25  26  27 │     
│ 28  29  30  31  32  33 │ │ 36  37  38  39  40  41 │   
╰───────────╮ 42  43  44 │ │ 45  46  47 ╭───────────╯     
            ╰────────────╯ ╰────────────╯ 

QWERTY POSITIONS
╭────────────────────────╮ ╭────────────────────────╮     
│ 0   Q   W   E   R   T  │ │ Y   U   I   O   P   12 │         
│ 13  A   S   D   F   G  │ │ H   J   K   L   ;   27 │
│ 28  Z   X   C   V   B  │ │ N   M   ,   .   /   41 │
╰───────────╮ 42  43  44 │ │ 45  46  47 ╭───────────╯     
            ╰────────────╯ ╰────────────╯ 

JOYSTICK POSITIONS
╭──────────╮
│    6     │
│ 19 35 20 │
│    21    │
╰──────────╯
*/

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#define U_MOUSE_MOVE_EXPONENT 2
// #define U_MOUSE_MOVE_TIME 650
#define U_MOUSE_MOVE_DELAY 0

#define U_MOUSE_SCROLL_EXPONENT 1
#define U_MOUSE_SCROLL_TIME 5000
#define U_MOUSE_SCROLL_DELAY 0

// homerow therms

#define TAP_TERM_MS 320
#define QUICK_TAP_MS 175
#define REQ_PRIOR_IDLE_MS 150

// combo terms

#define COMBO_TERM_FAST 18
#define COMBO_IDLE_FAST 150
#define COMBO_TERM_SLOW 30
#define COMBO_IDLE_SLOW 50

// tapdance terms

#define TAPDANCE_TERM 300

// key positions

#define LEFT_KEYS 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33
#define RIGHT_KEYS 7 8 9 10 11 12 22 23 24 25 26 27 36 37 38 39 40 41
#define LEFT_THUMB_KEYS 42 43 44
#define RIGHT_THUMB_KEYS 45 46 47
#define ALL_THUMB_KEYS 42 43 44 45 46 47
#define JOYSTICK_KEYS 6 19 20 21 35 // up left right down click

/ {
    behaviors {
        td_dot: td_dot {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&kp DOT>, <&kp COMMA>;
        };

        td_colon_semi: td_colon_semi {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };

        td_lpar: td_lpar {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&kp LPAR>, <&kp LBRC>; 
        };

        td_rpar: td_rpar {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&kp RPAR>, <&kp RBRC>; 
        };


        td_lbkt: td_lbkt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&kp LBKT>, <&kp LT>;
        };

        td_rbkt: td_rbkt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&kp RBKT>, <&kp RT>;
        };

        td_sqt: td_sqt {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&kp SQT>, <&kp DQT>;
        };

        td_slash: td_slash {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&rhm BSLH SLASH>, <&kp PIPE>;
        };

        td_copy: td_copy {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&lhm LC(C) LC(V)>,  <&kp LC(X)>;
        };

        td_undo: td_undo {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <TAPDANCE_TERM>;
            bindings = <&lhm LC(Y) LC(Z)>,  <&kp LC(X)>;
        };


        lhm: left_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQ_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <RIGHT_KEYS>, <ALL_THUMB_KEYS>;

            hold-trigger-on-release;
        };

        rhm: right_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <TAP_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQ_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <LEFT_KEYS>, <ALL_THUMB_KEYS>;

            hold-trigger-on-release;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll: scroll {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;
        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        // Horizontal ==============================

     

        // Left - <1 2> <14 15> <29 30>

        // qw {
        //     bindings = <&kp LC(A)>;
        //     key-positions = <1 2>;
        //     layers = <0>;
        //     timeout-ms = <COMBO_IDLE_FAST>;
        //     require-prior-idle-ms = <COMBO_TERM_FAST>;
        // };

        // as {
        //     bindings = <&kp LC(S)>;
        //     key-positions = <14 15>;
        //     layers = <0>;
        //     timeout-ms = <COMBO_IDLE_FAST>;
        //     require-prior-idle-ms = <COMBO_TERM_FAST>;
        // };

        // zx {
        //     bindings = <&kp LC(Z)>;
        //     key-positions = <29 30>;
        //     layers = <0>;
        //     timeout-ms = <COMBO_IDLE_FAST>;
        //     require-prior-idle-ms = <COMBO_TERM_FAST>;
        // };

        // Right - <22 36> <23 37> <24 38> <25 39>

        // under {
        //     bindings = <&kp UNDER>;
        //     key-positions = <40 41>;
        //     layers = <0>;
        //     timeout-ms = <COMBO_IDLE_SLOW>;
        //     require-prior-idle-ms = <COMBO_TERM_SLOW>;
        // };

        // minus {
        //     bindings = <&kp MINUS>;
        //     key-positions = <26 27>;
        //     layers = <0>;
        //     timeout-ms = <COMBO_IDLE_SLOW>;
        //     require-prior-idle-ms = <COMBO_TERM_SLOW>;
        // };

        // equal {
        //     bindings = <&kp EQUAL>;
        //     key-positions = <11 12>;
        //     layers = <0>;
        //     timeout-ms = <COMBO_IDLE_SLOW>;
        //     require-prior-idle-ms = <COMBO_TERM_SLOW>;
        // };

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <17 43>;
            layers = <0 4>;
            timeout-ms = <COMBO_IDLE_FAST>;
            require-prior-idle-ms = <COMBO_TERM_FAST>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <17 44>;
            layers = <0 4>;
            timeout-ms = <COMBO_IDLE_FAST>;
            require-prior-idle-ms = <COMBO_TERM_FAST>;
        };

        save {
            bindings = <&kp LC(S)>;
            key-positions = <23 46>;
            layers = <0 4>;
            timeout-ms = <COMBO_IDLE_FAST>;
            require-prior-idle-ms = <COMBO_TERM_FAST>;
        };

        close {
            bindings = <&kp LA(F4)>;
            key-positions = <0 13>;
            layers = <0>;
            timeout-ms = <COMBO_IDLE_FAST>;
            require-prior-idle-ms = <COMBO_TERM_FAST>;
        };

        minimize {
            bindings = <&kp LG(DOWN)>;
            key-positions = <12 27>;
            layers = <0>;
            timeout-ms = <COMBO_IDLE_FAST>;
            require-prior-idle-ms = <COMBO_TERM_FAST>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&lt 1 ESC         &kp Q        &kp W        &kp E          &kp R         &kp T                                     &mmv MOVE_UP                  &kp Y         &kp U         &kp I             &kp O            &kp P       &td_sqt
&lhm LS(TAB) TAB  &lhm LGUI A  &lhm LALT S  &lhm LSHIFT D  &lhm LCTRL F  &kp G                     &mmv MOVE_LEFT  &mkp LCLK    &mmv MOVE_RIGHT  &kp H         &rhm LCTRL J  &rhm LSHIFT K     &rhm LALT L      &td_rpar    &td_lpar
&td_undo          &kp Z        &kp X        &kp C          &kp V         &kp B    &mkp RCLK                        &mmv MOVE_DOWN                &kp N         &kp M         &rhm COMMA DOT    &rhm SEMI COLON  &td_rbkt    &td_lbkt
                                            &tog 4         &lt 2 SPACE   &lt 3 LANG_HANGEUL                                                      &rhm LS(ENTER) ENTER     &kp BSPC      &td_slash
            >;

            sensor-bindings = <&scroll>;
        };

        lower_layer {
            display-name = "BT";
            bindings = <
&none  &none            &none           &none         &none         &none                                     &mmv UP                &none            &none         &none           &none          &none  &none
&none  &bt BT_CLR_ALL   &bt BT_SEL 0    &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3                   &mmv LEFT  &mkp RCLK  &mmv RIGHT  &none             &none           &none         &none              &none  &bootloader
&none  &rgb_ug RGB_OFF  &rgb_ug RGB_ON  &none         &none         &rgb_ug RGB_EFF  &kp C_MUTE               &mmv DOWN              &rgb_ug RGB_EFR  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &none   &sys_reset
                                        &none         &none         &none                                                            &none            &none            &none
            >;

            sensor-bindings = <&scroll>;
        };

        raise_layer {
            display-name = "NAV";
            bindings = <
&kp GRAVE &none     &none     &none       &none      &none                  &none         &none  &kp PG_UP  &kp UP    &kp PG_DN  &kp DEL   &kp INS
&kp CAPS  &kp LGUI  &kp LALT  &kp LSHIFT  &kp LCTRL  &none           &none  &none  &none  &none  &kp LEFT   &kp DOWN  &kp RIGHT  &kp END   &kp HOME
&none     &none     &none     &none       &none      &none  &none           &none         &none  &none      &none     &none      &kp PG_DN &kp PAGE_UP
                              &none       &none      &none                                &none  &none      &none
            >;

            sensor-bindings = <&scroll>;
        };

        FN {
            display-name = "FN";
            bindings = <
&kp GRAVE   &none     &none     &none       &none      &none                   &none         &kp F7    &kp F8   &kp F9  &kp F12  &kp DEL   &kp INS
&kp CAPS    &kp LGUI  &kp LALT  &kp LSHIFT  &kp LCTRL  &none            &none  &none  &none  &kp F4    &kp F5   &kp F6  &kp F11  &kp END   &kp HOME
&td_undo    &none     &none     &none       &none      &none   &none           &none         &kp F1    &kp F2   &kp F3  &kp F10  &kp PG_DN &kp PAGE_UP
                                &kp LCTRL   &kp LALT    &none                                &kp PSCRN &kp SLCK  &kp PAUSE_BREAK
            >;

            sensor-bindings = <&scroll>;
        };

        NUM {
            display-name = "NUM";
            bindings = <
&kp ESC           &none     &kp LS(N7)        &kp LS(N8)          &kp LS(N9)         &kp LS(N0)                       &none             &kp N7     &kp N8     &kp N9    &kp N0      &none    &none
&lhm LS(TAB) TAB  &kp LGUI  &lhm LALT LS(N4)  &lhm LSHIFT LS(N5)  &lhm LCTRL LS(N6)  &kp LS(MINUS)                &none  &none  &none   &kp N4     &kp N5     &kp N6    &kp MINUS   &none    &none
&td_undo          &none     &kp LS(N1)        &kp LS(N2)          &kp LS(N3)         &kp LS(EQUAL)     &none                &none       &kp N1     &kp N2     &kp N3    &kp EQUAL   &none    &none
                                              &tog 4              &lt 2 SPACE        &tog 4                                             &rhm LS(ENTER) ENTER  &kp BSPC  &kp LC(S)
            >;

            sensor-bindings = <&scroll>;
        };
    };
};
